{"name": "test_user_will_be_logged_new_sessions", "status": "failed", "statusDetails": {"message": "AssertionError: Element ('css selector', '[class=\"styles_userToolsToggler__c2aHe\"]') not clicable", "trace": "self = <pages.login_page.LoginPage object at 0x000001A51D903150>\nlocator = ('css selector', '[class=\"styles_userToolsToggler__c2aHe\"]')\n\n    def wait_for_clicable(self, locator):\n        \"\"\"Waiting until the element becomes clickable otherwise an error will\n        be caused.\"\"\"\n        try:\n>           return WebDriverWait(self.driver, self.wait_until).until(\n                EC.element_to_be_clickable(locator))\n\nhelpers\\base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:92: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:356: in _predicate\n    element = visibility_of(target)(driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:167: in _predicate\n    return _element_if_visible(element)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:173: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:251: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:407: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A51D9017D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...95FA41+222753]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE76F87344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE785226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: MicrosoftEdge=119.0.2151.58); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B09E25B2+60402]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B0967302+253666]\nE       \t(No symbol) [0x00007FF6B0739C99]\nE       \t(No symbol) [0x00007FF6B074A045]\nE       \t(No symbol) [0x00007FF6B074AAC2]\nE       \t(No symbol) [0x00007FF6B073FB5D]\nE       \t(No symbol) [0x00007FF6B074AA93]\nE       \t(No symbol) [0x00007FF6B073FB5D]\nE       \t(No symbol) [0x00007FF6B073DD1B]\nE       \t(No symbol) [0x00007FF6B07414E2]\nE       \t(No symbol) [0x00007FF6B07C6186]\nE       \t(No symbol) [0x00007FF6B07ABA8A]\nE       \t(No symbol) [0x00007FF6B077D766]\nE       \t(No symbol) [0x00007FF6B07C5111]\nE       \t(No symbol) [0x00007FF6B07AB863]\nE       \t(No symbol) [0x00007FF6B077C585]\nE       \t(No symbol) [0x00007FF6B077B993]\nE       \t(No symbol) [0x00007FF6B077CD14]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6B0BC3454+1161924]\nE       \t(No symbol) [0x00007FF6B07FE5F6]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6B08BB083+37459]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6B08B2C4D+3613]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6B0BC2194+1157124]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B0971658+295480]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B096CB24+276228]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B096CC52+276530]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6B095FA41+222753]\nE       \tBaseThreadInitThunk [0x00007FFE76F87344+20]\nE       \tRtlUserThreadStart [0x00007FFE785226B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"0ab08d98bbdbcee5f2c68153e9efe548\")>\n\n    @pytest.fixture(scope='function')\n    def user_authorization(driver):\n        \"\"\"User authorization fixture on the site: https://www.21vek.by.\n        Steps:\n            1. Initializes an object of the Test21vek class with the driver\n            passed in the parameter.\n            2. Opens the main page of the site.\n            3. Rejects the cookie usage agreement.\n            4. Clicks on the account button.\n            5. Presses the login button.\n            6. Fills in the email input field with the value from the\n            TEST_USER variable.\n            7. Fills in the password input field with the value from the\n            TEST_USER variable.\n            8. Presses the login confirmation button.\n            9. Checks that the user has successfully logged into the account.\"\"\"\n        login_page = LoginPage(driver)\n        login_page.log_in_to_the_login_window()\n        login_page.fill(login_page.locator_input_email,\n                        TEST_USER.get('email'))\n        login_page.fill(login_page.locator_input_password,\n                        TEST_USER.get('password'))\n        login_page.hard_click(login_page.locator_login_submit)\n>       login_page.assert_that_the_user_has_logged_in()\n\npages\\login_page.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:46: in assert_that_the_user_has_logged_in\n    self.hard_click(self.locator_authorized_account_button)\nhelpers\\base.py:40: in hard_click\n    element = self.wait_for_clicable(locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000001A51D903150>\nlocator = ('css selector', '[class=\"styles_userToolsToggler__c2aHe\"]')\n\n    def wait_for_clicable(self, locator):\n        \"\"\"Waiting until the element becomes clickable otherwise an error will\n        be caused.\"\"\"\n        try:\n            return WebDriverWait(self.driver, self.wait_until).until(\n                EC.element_to_be_clickable(locator))\n        except WebDriverException:\n>           assert False, f\"Element {locator} not clicable\"\nE           AssertionError: Element ('css selector', '[class=\"styles_userToolsToggler__c2aHe\"]') not clicable\n\nhelpers\\base.py:21: AssertionError"}, "description": "Precondition: the user must be logged in to the site.\n        The test checks the user's automatic login to the account in a new\n        session. Steps:\n            1. Opens a new tab in the browser.\n            2. Switches to a new tab.\n            3. Opens the main page of the site in a new tab.\n            4. Initializes an object of the Test21vek class with the driver\n            passed in the parameter.\n            5. Checks that the user has successfully logged into the account\n            on a new tab of the site.", "start": 1700079965643, "stop": 1700079965643, "uuid": "588ed841-c083-4d2d-86db-11a4424a95f9", "historyId": "5db8387fe99fa43f60e469193aeb9a0f", "testCaseId": "5db8387fe99fa43f60e469193aeb9a0f", "fullName": "tests.test_login.TestAuthorizationWindow#test_user_will_be_logged_new_sessions", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestAuthorizationWindow"}, {"name": "host", "value": "DESKTOP-U090JD3"}, {"name": "thread", "value": "12352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}