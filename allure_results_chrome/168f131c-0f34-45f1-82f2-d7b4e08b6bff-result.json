{"name": "test_user_will_be_logged_new_sessions", "status": "failed", "statusDetails": {"message": "AssertionError: Element ('css selector', '[class=\"styles_userToolsToggler__c2aHe\"]') not clicable", "trace": "self = <pages.login_page.LoginPage object at 0x000002AC2B0E0D10>\nlocator = ('css selector', '[class=\"styles_userToolsToggler__c2aHe\"]')\n\n    @allure.step('wait for clicable element')\n    def wait_for_clicable(self, locator):\n        \"\"\"Waiting until the element becomes clickable otherwise an error will\n        be caused.\"\"\"\n        try:\n>           return WebDriverWait(self.driver, self.wait_until).until(\n                EC.element_to_be_clickable(locator))\n\nhelpers\\base.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:92: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:357: in _predicate\n    if element and element.is_enabled():\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:191: in is_enabled\n    return self._execute(Command.IS_ELEMENT_ENABLED)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002AC2B0E3990>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77A27C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77A27C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=119.0.6045.159); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x009D72A3+45731]\nE       \t(No symbol) [0x00962D51]\nE       \t(No symbol) [0x0085880D]\nE       \t(No symbol) [0x00862B8F]\nE       \t(No symbol) [0x0085CB76]\nE       \t(No symbol) [0x0085B838]\nE       \t(No symbol) [0x0085DB1A]\nE       \t(No symbol) [0x0085DBC0]\nE       \t(No symbol) [0x008887DB]\nE       \t(No symbol) [0x008A7FDC]\nE       \t(No symbol) [0x00884A4E]\nE       \t(No symbol) [0x008A8254]\nE       \t(No symbol) [0x008BB7A2]\nE       \t(No symbol) [0x008A7DD6]\nE       \t(No symbol) [0x008831F6]\nE       \t(No symbol) [0x0088439D]\nE       \tGetHandleVerifier [0x00CE0716+3229462]\nE       \tGetHandleVerifier [0x00D284C8+3523784]\nE       \tGetHandleVerifier [0x00D2214C+3498316]\nE       \tGetHandleVerifier [0x00A61680+611968]\nE       \t(No symbol) [0x0096CCCC]\nE       \t(No symbol) [0x00968DF8]\nE       \t(No symbol) [0x00968F1D]\nE       \t(No symbol) [0x0095B2C7]\nE       \tBaseThreadInitThunk [0x7769FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77A27C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77A27C3E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45e935ec61d03aade9fbdaf71b39ae4a\")>\n\n    @allure.step('User authorization')\n    @pytest.fixture(scope='function')\n    def user_authorization(driver):\n        \"\"\"User authorization fixture on the site\"\"\"\n        with allure.step('Initializes an object of the LoginPage class'):\n            login_page = LoginPage(driver)\n        login_page.log_in_to_the_login_window()\n        login_page.fill_email()\n        login_page.fill_password()\n        login_page.confirm_data()\n>       login_page.assert_that_the_user_has_logged_in()\n\npages\\login_page.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:47: in assert_that_the_user_has_logged_in\n    self.hard_click(self.locator_authorized_account_button)\nhelpers\\base.py:45: in hard_click\n    element = self.wait_for_clicable(locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.login_page.LoginPage object at 0x000002AC2B0E0D10>\nlocator = ('css selector', '[class=\"styles_userToolsToggler__c2aHe\"]')\n\n    @allure.step('wait for clicable element')\n    def wait_for_clicable(self, locator):\n        \"\"\"Waiting until the element becomes clickable otherwise an error will\n        be caused.\"\"\"\n        try:\n            return WebDriverWait(self.driver, self.wait_until).until(\n                EC.element_to_be_clickable(locator))\n        except WebDriverException:\n>           assert False, f\"Element {locator} not clicable\"\nE           AssertionError: Element ('css selector', '[class=\"styles_userToolsToggler__c2aHe\"]') not clicable\n\nhelpers\\base.py:23: AssertionError"}, "description": "Precondition: the user must be logged in to the site.\n        The test checks the user's automatic login to the account in a new\n        session.", "start": 1700146589469, "stop": 1700146589469, "uuid": "8fc6dcd0-de8d-4bdb-a202-f197f04fb6c5", "historyId": "5db8387fe99fa43f60e469193aeb9a0f", "testCaseId": "5db8387fe99fa43f60e469193aeb9a0f", "fullName": "tests.test_login.TestAuthorizationWindow#test_user_will_be_logged_new_sessions", "labels": [{"name": "feature", "value": "authorization"}, {"name": "story", "value": "Checks that the user is authorized"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestAuthorizationWindow"}, {"name": "host", "value": "DESKTOP-U090JD3"}, {"name": "thread", "value": "5776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}