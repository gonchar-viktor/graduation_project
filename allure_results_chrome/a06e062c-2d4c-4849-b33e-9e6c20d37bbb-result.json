{"name": "f", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=119.0.6045.159); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00B472A3+45731]\n\t(No symbol) [0x00AD2D51]\n\t(No symbol) [0x009C880D]\n\t(No symbol) [0x009CC3EA]\n\t(No symbol) [0x009CDB1A]\n\t(No symbol) [0x009CDBC0]\n\t(No symbol) [0x00A0067C]\n\t(No symbol) [0x009FF01D]\n\t(No symbol) [0x009FD89B]\n\t(No symbol) [0x009FCBA1]\n\t(No symbol) [0x009F4FC0]\n\t(No symbol) [0x00A17FDC]\n\t(No symbol) [0x009F4A4E]\n\t(No symbol) [0x00A18254]\n\t(No symbol) [0x00A2B7A2]\n\t(No symbol) [0x00A17DD6]\n\t(No symbol) [0x009F31F6]\n\t(No symbol) [0x009F439D]\n\tGetHandleVerifier [0x00E50716+3229462]\n\tGetHandleVerifier [0x00E984C8+3523784]\n\tGetHandleVerifier [0x00E9214C+3498316]\n\tGetHandleVerifier [0x00BD1680+611968]\n\t(No symbol) [0x00ADCCCC]\n\t(No symbol) [0x00AD8DF8]\n\t(No symbol) [0x00AD8F1D]\n\t(No symbol) [0x00ACB2C7]\n\tBaseThreadInitThunk [0x76FDFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C77C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C77C3E+238]", "trace": "self = <test_basket_page.TestBasketPage object at 0x000002E02A814450>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fc1f02ba26a1ceb6aa58a3499dd74e82\")>\n\n    @allure.title('f')\n    def test_cart_operation(self, driver):\n        \"\"\"Checks that when adding an item to the cart, the quantity and name\n        of the goods are displayed.\"\"\"\n        main_page = MainPage(driver)\n        main_page.open_page_and_reject_cookies()\n        basket_page = BasketPage(driver)\n>       basket_page.select_a_product_and_add_it_to_cart()\n\ntests\\test_basket_page.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\basket_page.py:46: in select_a_product_and_add_it_to_cart\n    self.click_on_product(self.CHOOSE_PRODUCT_LOCATOR2)\npages\\basket_page.py:15: in click_on_product\n    self.click_on(product)\nhelpers\\base.py:45: in click_on\n    element.click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002E02AC45AD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C77C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C77C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=119.0.6045.159); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00B472A3+45731]\nE       \t(No symbol) [0x00AD2D51]\nE       \t(No symbol) [0x009C880D]\nE       \t(No symbol) [0x009CC3EA]\nE       \t(No symbol) [0x009CDB1A]\nE       \t(No symbol) [0x009CDBC0]\nE       \t(No symbol) [0x00A0067C]\nE       \t(No symbol) [0x009FF01D]\nE       \t(No symbol) [0x009FD89B]\nE       \t(No symbol) [0x009FCBA1]\nE       \t(No symbol) [0x009F4FC0]\nE       \t(No symbol) [0x00A17FDC]\nE       \t(No symbol) [0x009F4A4E]\nE       \t(No symbol) [0x00A18254]\nE       \t(No symbol) [0x00A2B7A2]\nE       \t(No symbol) [0x00A17DD6]\nE       \t(No symbol) [0x009F31F6]\nE       \t(No symbol) [0x009F439D]\nE       \tGetHandleVerifier [0x00E50716+3229462]\nE       \tGetHandleVerifier [0x00E984C8+3523784]\nE       \tGetHandleVerifier [0x00E9214C+3498316]\nE       \tGetHandleVerifier [0x00BD1680+611968]\nE       \t(No symbol) [0x00ADCCCC]\nE       \t(No symbol) [0x00AD8DF8]\nE       \t(No symbol) [0x00AD8F1D]\nE       \t(No symbol) [0x00ACB2C7]\nE       \tBaseThreadInitThunk [0x76FDFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C77C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C77C3E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "description": "Checks that when adding an item to the cart, the quantity and name\n        of the goods are displayed.", "start": 1700080658930, "stop": 1700080668383, "uuid": "7d487fa8-650d-4833-865c-86268185919d", "historyId": "d4837cc2cfee3b275771c014cc170943", "testCaseId": "d4837cc2cfee3b275771c014cc170943", "fullName": "tests.test_basket_page.TestBasketPage#test_cart_operation", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_basket_page"}, {"name": "subSuite", "value": "TestBasketPage"}, {"name": "host", "value": "DESKTOP-U090JD3"}, {"name": "thread", "value": "13044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_basket_page"}]}