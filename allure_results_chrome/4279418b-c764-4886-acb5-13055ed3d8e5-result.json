{"name": "test_catalog_search", "status": "failed", "statusDetails": {"message": "AssertionError: Element ('css selector', '[href=\"/nonfiction_books/popuri_01309.html\"]') not clicable", "trace": "self = <pages.main_page.MainPage object at 0x000002E02ACC8610>\nlocator = ('css selector', '[href=\"/nonfiction_books/popuri_01309.html\"]')\n\n    def wait_for_clicable(self, locator):\n        \"\"\"Waiting until the element becomes clickable otherwise an error will\n        be caused.\"\"\"\n        try:\n>           return WebDriverWait(self.driver, self.wait_until).until(\n                EC.element_to_be_clickable(locator))\n\nhelpers\\base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:92: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:357: in _predicate\n    if element and element.is_enabled():\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:191: in is_enabled\n    return self._execute(Command.IS_ELEMENT_ENABLED)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002E02AC17BD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C77C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C77C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=119.0.6045.159); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00B472A3+45731]\nE       \t(No symbol) [0x00AD2D51]\nE       \t(No symbol) [0x009C880D]\nE       \t(No symbol) [0x009CC3EA]\nE       \t(No symbol) [0x009CDB1A]\nE       \t(No symbol) [0x009CDBC0]\nE       \t(No symbol) [0x009F87DB]\nE       \t(No symbol) [0x00A17FDC]\nE       \t(No symbol) [0x009F4A4E]\nE       \t(No symbol) [0x00A18254]\nE       \t(No symbol) [0x00A2B7A2]\nE       \t(No symbol) [0x00A17DD6]\nE       \t(No symbol) [0x009F31F6]\nE       \t(No symbol) [0x009F439D]\nE       \tGetHandleVerifier [0x00E50716+3229462]\nE       \tGetHandleVerifier [0x00E984C8+3523784]\nE       \tGetHandleVerifier [0x00E9214C+3498316]\nE       \tGetHandleVerifier [0x00BD1680+611968]\nE       \t(No symbol) [0x00ADCCCC]\nE       \t(No symbol) [0x00AD8DF8]\nE       \t(No symbol) [0x00AD8F1D]\nE       \t(No symbol) [0x00ACB2C7]\nE       \tBaseThreadInitThunk [0x76FDFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C77C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C77C3E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_header.TestHeader object at 0x000002E02AC36110>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ee0e89ec701ca60ef7119107acf418b3\")>\n\n    def test_catalog_search(self, driver):\n        \"\"\"Enters the name of the product in the input field, selects the\n        product and checks that the desired page has opened.\"\"\"\n        header = MainPage(driver)\n        header.open_page_and_reject_cookies()\n        header.enter_product_text(header.request_text)\n>       header.click_on_product(header.CHOOSE_PRODUCT_LOCATOR)\n\ntests\\test_header.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nelements\\header_element.py:28: in click_on_product\n    self.click_on(product)\nhelpers\\base.py:44: in click_on\n    element = self.wait_for_clicable(locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.main_page.MainPage object at 0x000002E02ACC8610>\nlocator = ('css selector', '[href=\"/nonfiction_books/popuri_01309.html\"]')\n\n    def wait_for_clicable(self, locator):\n        \"\"\"Waiting until the element becomes clickable otherwise an error will\n        be caused.\"\"\"\n        try:\n            return WebDriverWait(self.driver, self.wait_until).until(\n                EC.element_to_be_clickable(locator))\n        except WebDriverException:\n>           assert False, f\"Element {locator} not clicable\"\nE           AssertionError: Element ('css selector', '[href=\"/nonfiction_books/popuri_01309.html\"]') not clicable\n\nhelpers\\base.py:21: AssertionError"}, "description": "Enters the name of the product in the input field, selects the\n        product and checks that the desired page has opened.", "start": 1700080771272, "stop": 1700080778938, "uuid": "fd22b5de-2953-4833-b8e6-d8d7de0addc2", "historyId": "c992f18eae1781e9bb97083d8746cbff", "testCaseId": "c992f18eae1781e9bb97083d8746cbff", "fullName": "tests.test_header.TestHeader#test_catalog_search", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_header"}, {"name": "subSuite", "value": "TestHeader"}, {"name": "host", "value": "DESKTOP-U090JD3"}, {"name": "thread", "value": "13044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_header"}]}